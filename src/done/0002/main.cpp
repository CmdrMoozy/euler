/*
 * euler - A collection of ProjectEuler libraries, tools, and solutions.
 * Copyright (C) 2013 Axel Rasmussen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <cstdint>

#include "common/math/EMath.h"
#include "common/util/Process.hpp"

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 *     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * Find the sum of all the even-valued terms in the sequence which do not exceed
 * four million.
 */

namespace
{
constexpr uint64_t UPPER_BOUND = 4000000;
constexpr uint64_t EXPECTED_RESULT = 4613732;

euler::util::process::ProblemResult<uint64_t> problem()
{
	uint64_t total = 0;
	uint32_t n = 0;
	uint64_t fib = EMath::getFibonacciNumberN_UI(n);
	while(fib <= UPPER_BOUND)
	{
		if((fib & 1) == 0)
			total += fib;

		++n;
		fib = EMath::getFibonacciNumberN_UI(n);
	}
	return {total, EXPECTED_RESULT};
}
}

EULER_PROBLEM_ENTRYPOINT
