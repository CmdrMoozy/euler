/*
 * euler - A collection of ProjectEuler solutions, and supporting libraries and
 *tools.
 * Copyright (C) 2013 Axel Rasmussen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef INCLUDE_LIBEULER_EXCEPTIONS_H
#define INCLUDE_LIBEULER_EXCEPTIONS_H

#include <stdexcept>
#include <string>

/*!
 * \brief This class is our base class for all of our exceptions.
 *
 * It is present so one can catch all exceptions generated by libsquare, while
 * avoiding getting standard C++ exceptions (i.e., catch(EException &e) as
 * opposed to catch(std::exception &e)).
 */
class EException
{
public:
	explicit EException(const std::string &wh);
	~EException() noexcept = default;

	EException(EException const &) = default;
	EException &operator=(EException const &) = default;

	const char *what() const noexcept;

private:
	std::string w;
};

/*!
 * \brief This class represents an exception thrown due to an assertion failure.
 *
 * It is designed to be thrown (primarily) from our EASSERT() macro defined in
 *EDefines.h.
 */
class EAssertionException : public EException
{
public:
	explicit EAssertionException(const std::string &wh);
};

/*!
 * \brief This class represents an exception being thrown due to an index being
 *out of bounds.
 *
 * It is designed to be thrown, for example, by a function that is
 * accessing an array that encounters an index that is out-of-bounds. It
 *subclasses
 * std::exception, so it can be caught with a general try/catch block.
 */
class EOutOfBoundsException : public EException
{
public:
	explicit EOutOfBoundsException(const std::string &wh);
};

/*!
 * \brief This class represents an exception being thrown due to a value being
 *out of range.
 *
 * It is designed to be thrown, for example, by a function that takes some
 * numerical input which has specific restrictions on the input value which
 *encounters a value
 * which is invalid. It subclasses std::exception, so it can be caught with a
 *general try/catch
 * block.
 */
class EValueRangeException : public EException
{
public:
	explicit EValueRangeException(const std::string &wh);
};

/*!
 * \brief This class represents an exception being thrown due to a value being
 *too large.
 *
 * It is designed to be thrown, for example, by a function that does some
 *calculation whose
 * result can end up being too large for the function to handle. It subclasses
 *std::exception,
 * so it can be caught with a general try/catch block.
 */
class EOverflowException : public EException
{
public:
	explicit EOverflowException(const std::string &wh);
};

/*!
 * \brief This class represents an exception being thrown due to a value being
 *too small.
 *
 * It is designed to be thrown, for example, by a function that does some
 *calculation whose
 * result can end up being too small for the function to handle. It subclasses
 *std::exception,
 * so it can be caught with a general try/catch block.
 */
class EUnderflowException : public EException
{
public:
	explicit EUnderflowException(const std::string &wh);
};

/*!
 * \brief This class represents an exception being thrown due to an attempt to
 *divide by zero.
 *
 * It is fairly specific about what the error is, however the cause can be
 *several different
 * things - perhaps a divide or modulus operation, for instance. It subclasses
 *std::exception,
 * so it can be caught with a general try/catch block.
 */
class EDivideByZeroException : public EException
{
public:
	explicit EDivideByZeroException(const std::string &wh);
};

#endif
