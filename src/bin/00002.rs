// euler - A collection of ProjectEuler libraries, tools, and solutions.
// Copyright (C) 2013 Axel Rasmussen
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
//     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// Find the sum of all the even-valued terms in the sequence which do not
// exceed four million.

extern crate euler;
use self::euler::math::sequence;
use self::euler::util::error::*;
use self::euler::util::problem::*;

const UPPER_BOUND: u64 = 4000000;
const EXPECTED_RESULT: u64 = 4613732;

fn main() {
    main_impl(|| -> EulerResult<ProblemAnswer<u64>> {
        let mut total: u64 = 0;
        let mut n: u64 = 0;
        let mut fib: u64 = sequence::get_nth_fibonacci_number(n);
        while fib <= UPPER_BOUND {
            if (fib & 1) == 0 {
                total += fib;
            }

            n += 1;
            fib = sequence::get_nth_fibonacci_number(n);
        }

        Ok(ProblemAnswer {
            actual: total,
            expected: EXPECTED_RESULT,
        })
    });
}
