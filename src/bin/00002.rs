// Copyright 2013 Axel Rasmussen
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
//     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// Find the sum of all the even-valued terms in the sequence which do not
// exceed four million.

extern crate euler;
use self::euler::math::sequence;
use self::euler::util::convert::*;
use self::euler::util::error::*;
use self::euler::util::problem::*;

const UPPER_BOUND: u64 = 4000000;
const EXPECTED_RESULT: u64 = 4613732;

fn main() {
    main_impl(|| -> Result<ProblemAnswer<u64>> {
        let mut total: u64 = 0;
        let mut n: u64 = 0;
        let mut fib: u64 = mpz_to_u64(&sequence::get_nth_fibonacci_number(n))?;
        while fib <= UPPER_BOUND {
            if (fib & 1) == 0 {
                total += fib;
            }

            n += 1;
            fib = mpz_to_u64(&sequence::get_nth_fibonacci_number(n))?;
        }

        Ok(ProblemAnswer {
            actual: total,
            expected: EXPECTED_RESULT,
        })
    });
}
