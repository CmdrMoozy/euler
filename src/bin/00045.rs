// Copyright 2013 Axel Rasmussen
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Triangle, pentagonal, and hexagonal numbers are generated by the following
// formulae:
//
// Triangle      T(n) = n(n+1) / 2     1, 3, 6, 10, 15, ...
// Pentagonal    P(n) = n(3n-1) / 2    1, 5, 12, 22, 35, ...
// Hexagonal     H(n) = n(2n-1)        1, 6, 15, 28, 45, ...
//
// It can be verified that T(285) = P(165) = H(143) = 40755.
//
// Find the next triangle number that is also pentagonal and hexagonal.

extern crate euler;
use self::euler::math::sequence::{get_nth_triangle_number, get_nth_pentagonal_number,
                                  get_nth_hexagonal_number, sequence_search};
use self::euler::util::error::*;
use self::euler::util::problem::*;

const EXPECTED_RESULT: u64 = 1533776805;

fn main() {
    main_impl(|| -> Result<ProblemAnswer<u64>> {
        let mut t_idx: u64 = 286;
        let mut result: u64;
        loop {
            result = get_nth_triangle_number(t_idx);
            if sequence_search(t_idx, result, get_nth_pentagonal_number).1 == result &&
               sequence_search(t_idx, result, get_nth_hexagonal_number).1 == result {
                break;
            }
            t_idx += 1;
        }

        Ok(ProblemAnswer {
            actual: result,
            expected: EXPECTED_RESULT,
        })
    });
}
