/*
 * euler - A collection of ProjectEuler libraries, tools, and solutions.
 * Copyright (C) 2013 Axel Rasmussen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <cstdint>
#include <list>

#include "common/math/EMath.h"
#include "common/util/Process.hpp"

/*
 * Triangle, pentagonal, and hexagonal numbers are generated by the following
 * formulae:
 *
 * Triangle      Tn = n(n+1) / 2     1, 3, 6, 10, 15, ...
 * Pentagonal    Pn = n(3n-1) / 2    1, 5, 12, 22, 35, ...
 * Hexagonal     Hn = n(2n-1)        1, 6, 15, 28, 45, ...
 *
 * It can be verified that T(285) = P(165) = H(143) = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 */

namespace
{
constexpr uint64_t T_START_INDEX = 286;
constexpr uint64_t P_START_INDEX = 165;
constexpr uint64_t H_START_INDEX = 143;

constexpr uint64_t EXPECTED_RESULT = 1533776805;

euler::util::process::ProblemResult<uint64_t> problem()
{
	uint64_t triangleNumber, iT, iP, iH;
	std::list<uint64_t> p, h;

	iT = T_START_INDEX;
	iP = P_START_INDEX;
	iH = H_START_INDEX;

	p.push_back(EMath::getPentagonalNumberN(iP++));
	h.push_back(EMath::getHexagonalNumberN(iH++));

	while(true)
	{
		triangleNumber = EMath::getTriangleNumberN(iT++);

		while(p.back() < triangleNumber)
			p.push_back(EMath::getPentagonalNumberN(iP++));

		while(h.back() < triangleNumber)
			h.push_back(EMath::getHexagonalNumberN(iH++));

		if((triangleNumber == p.back()) && (triangleNumber == h.back()))
			break;
	}

	return {triangleNumber, EXPECTED_RESULT};
}
}

EULER_PROBLEM_ENTRYPOINT
