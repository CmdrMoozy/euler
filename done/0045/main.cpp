#include <iostream>
#include <cassert>
#include <list>

#include "libeuler/math/EMath.h"

#define T_START_INDEX 286
#define P_START_INDEX 165
#define H_START_INDEX 143

/*
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 *
 * Triangle      Tn = n(n+1) / 2     1, 3, 6, 10, 15, ...
 * Pentagonal    Pn = n(3n-1) / 2    1, 5, 12, 22, 35, ...
 * Hexagonal     Hn = n(2n-1)        1, 6, 15, 28, 45, ...
 *
 * It can be verified that T(285) = P(165) = H(143) = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 */

int main(void)
{
	uint64_t triangleNumber, iT, iP, iH;
	std::list<uint64_t> p, h;
	
	iT = T_START_INDEX;
	iP = P_START_INDEX;
	iH = H_START_INDEX;
	
	p.push_back(EMath::getPentagonalNumberN(iP++));
	h.push_back(EMath::getHexagonalNumberN(iH++));
	
	while(true)
	{
		triangleNumber = EMath::getTriangleNumberN(iT++);
		
		while(p.back() < triangleNumber)
			p.push_back(EMath::getPentagonalNumberN(iP++));
		
		while(h.back() < triangleNumber)
			h.push_back(EMath::getHexagonalNumberN(iH++));
		
		if( (triangleNumber == p.back()) && (triangleNumber == h.back()) )
			break;
	}
	
	std::cout << "The next triangle number that is also pentagonal and hexagonal is: " << triangleNumber << "\n";
	
	assert(triangleNumber == 1533776805);
	return 0;
}
